// // const canvas = document.getElementById('gameCanvas');
// // const ctx = canvas.getContext('2d');
// // const tileset = new Image();
// // tileset.src = 'https://24hweb.iutv.univ-paris13.fr/tileset.png';

// // // tileset.onload = () => {
// // //     const tileWidth = 16;
// // //     const tileHeight = 16;
// // //     const tilesPerRow = tileset.width / tileWidth;
// // //     const map = [
// // //         [73,74,73,74,73,74,73,74,73,74,73,74,73,74,713,714,73,74,73,74,73],
// // //         [108,109,108,109,108,109,108,109,108,109,108,109,108,109,748,749,108,109,108,109,108],
// // //         [73,74,73,74,73,74,73,74,73,74,73,74,73,74,748,749,73,74,73,74,73],
// // //         [108,109,108,109,108,109,108,109,108,109,108,109,108,109,748,749,108,109,108,109,108],
// // //         [283,283,283,283,283,284,73,74,73,74,73,74,73,74,748,749,73,74,73,74,73],
// // //         [318,318,318,318,283,283,283,284,108,109,108,109,108,109,748,749,108,109,108,109,108],
// // //         [73,74,73,74,318,318,283,283,284,74,73,74,73,74,748,749,73,74,73,74,73],
// // //         [108,109,108,109,108,109,318,283,284,109,108,109,108,109,748,749,108,109,108,109,108],
// // //         [73,74,73,74,73,74,73,283,284,74,73,74,73,74,748,749,73,74,73,74,73],
// // //         [108,109,108,109,108,109,108,283,284,109,108,109,108,109,748,749,108,109,108,109,108],
// // //         [73,74,73,74,73,74,73,283,284,74,73,74,73,74,748,749,73,74,73,74,73],
// // //         [108,109,108,109,108,109,108,283,284,109,108,109,108,109,748,749,108,109,108,109,108],
// // //         [713,713,713,713,714,74,73,283,284,74,73,74,73,74,748,749,73,74,73,74,73],
// // //         [748,748,748,748,713,713,713,713,713,713,713,713,713,713,748,749,108,109,108,109,108],
// // //         [73,74,73,74,748,748,748,748,748,748,748,748,748,748,748,749,73,74,73,74,73],
// // //         [108,109,108,109,108,109,108,283,284,109,108,109,108,109,108,109,108,109,108,109,108],
// // //         [73,74,73,74,73,74,73,3853,3854,74,93,93,93,74,93,74,93,74,93,74,73],
// // //         [108,109,108,109,108,109,108,3888,3889,109,108,109,93,109,93,109,93,109,93,109,108],
// // //         [73,74,73,74,73,74,73,3923,3924,74,93,93,93,74,93,93,93,74,93,93,93],
// // //         [108,109,108,109,108,109,108,3958,3959,109,93,109,108,109,108,109,93,109,93,109,93],
// // //         [73,74,73,74,73,74,73,3993,3994,74,93,93,93,74,73,74,93,74,93,74,93]
// // //     ];


// // //     canvas.width = map[0].length * tileWidth; // Définir la largeur du canvas en fonction de la largeur de la carte
// // //     canvas.height = map.length * tileHeight; // Définir la hauteur du canvas en fonction de la hauteur de la carte

// // //     for (let y = 0; y < map.length; y++) {
// // //         for (let x = 0; x < map[y].length; x++) {
// // //             const tileId = map[y][x];
// // //             const sx = (tileId % tilesPerRow) * tileWidth;
// // //             const sy = Math.floor(tileId / tilesPerRow) * tileHeight;
// // //             drawTile(sx, sy, tileWidth, tileHeight, x * tileWidth, y * tileHeight);
// // //         }
// // //     }
// // // };

// // // fetch('map-layers.json')
// // //   .then(response => response.json())
// // //   .then(data => {
// // //     data.forEach(layer => {
// // //       drawLayer(layer.view);
// // //     });
// // //   });

// // // function drawLayer(layerData) {
// // //   for (let y = 0; y < layerData.length; y++) {
// // //     for (let x = 0; x < layerData[y].length; x++) {
// // //       const tileId = layerData[y][x];
// // //       // Dessiner le tile correspondant en fonction de son ID
// // //       drawTile2(tileId, x, y);
// // //     }
// // //   }
// // // }


// // // function drawTile2(tileId, x, y) {
// // //     const tileWidth = 16; // Largeur d'une tuile en pixels
// // //     const tileHeight = 16; // Hauteur d'une tuile en pixels
// // //     const tilesPerRow = tileset.width / tileWidth; // Nombre de tuiles par ligne dans le tileset
  
// // //     // Calculer les coordonnées source (sx, sy) dans le tileset en fonction de l'ID de la tuile
// // //     const sx = (tileId % tilesPerRow) * tileWidth;
// // //     const sy = Math.floor(tileId / tilesPerRow) * tileHeight;
  
// // //     // Dessiner la tuile sur le canvas aux coordonnées (x, y)
// // //     ctx.drawImage(tileset, sx, sy, tileWidth, tileHeight, x * tileWidth, y * tileHeight, tileWidth, tileHeight);
// // //   }
  

// // // function drawTile(sx, sy, tileWidth, tileHeight, dx, dy) {
// // //     ctx.drawImage(tileset, sx, sy, tileWidth, tileHeight, dx, dy, tileWidth, tileHeight);
// // // }



// // // Parcourir chaque objet dans le tableau JSON
// // json.forEach(layer => {
// //     // Vérifier le nom de la couche
// //     switch (layer.name) {
// //         case "Background":
// //             drawLayer(layer.view);
// //             break;
// //         case "Main":
// //             drawLayer(layer.view);
// //             break;
// //         case "Front":
// //             drawLayer(layer.view);
// //             break;
// //         case "Items":
// //             drawLayer(layer.view);
// //             break;
// //         default:
// //             break;
// //     }
// // });

// // // Fonction pour dessiner une couche
// // function drawLayer(view) {
// //     // Parcourir les données de vue et dessiner chaque tuile
// //     for (let y = 0; y < view.length; y++) {
// //         for (let x = 0; x < view[y].length; x++) {
// //             const tileId = view[y][x];
// //             // Dessiner la tuile si ce n'est pas un espace vide
// //             if (tileId !== -1) {
// //                 drawTile(tileId, x, y);
// //             }
// //         }
// //     }
// // }


// // Récupérer le canvas et son contexte
// const canvas = document.getElementById('gameCanvas');
// const ctx = canvas.getContext('2d');

// // Charger l'image du tileset
// const tileset = new Image();
// tileset.src = 'https://24hweb.iutv.univ-paris13.fr/tileset.png';

// // Le tableau JSON avec les données des couches
// const json = [{"name":"Background","view":[[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,72,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,107,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,107],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,72,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72],[107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107,108,107],[72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72,73,72]]},{"name":"Main","view":[[-1,-1,-1,2485,2486,2625,2626,-1,2485,2486,-1,2590,2591,535,502,319,-1,-1,-1,-1,-1],[-1,-1,-1,2520,2521,-1,-1,-1,2520,2521,-1,2625,2626,500,537,284,-1,-1,-1,-1,-1],[-1,-1,-1,2555,2556,2450,2451,-1,2555,2556,-1,-1,-1,-1,491,319,183,-1,-1,-1,-1],[-1,-1,-1,-1,-1,2485,2486,-1,-1,-1,-1,-1,-1,-1,526,218,219,-1,-1,-1,-1],[-1,-1,-1,-1,-1,2520,2521,-1,-1,-1,-1,-1,-1,-1,491,527,218,-1,-1,-1,-1],[-1,-1,-1,-1,-1,2555,2556,-1,-1,-1,-1,-1,-1,-1,531,496,493,218,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,531,492,218,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,491,528,469,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,526,492,493,469,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,541,527,492,428,429],[-1,-1,-1,-1,2614,2615,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,501,527,492,458],[-1,-1,-1,-1,2649,2650,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,501,492,493,492],[-1,-1,-1,-1,2684,2685,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,466,492,527,528,492],[-1,-1,-1,-1,2719,2720,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,491,493,492,527,492],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,466,492,493,527,527,492],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,491,493,493,527,528,492],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,490,501,493,492,527,528,492],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,525,536,528,527,527,528,492],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,490,501,493,527,528,528,492],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,350,491,492,492,492,492,492],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,561,562,562,527,492,527]]},{"name":"Front","view":[[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]},{"name":"Items","view}];

// // Fonction pour dessiner une couche
// function drawLayer(view) {
//     // Parcourir les données de vue et dessiner chaque tuile
//     for (let y = 0; y < view.length; y++) {
//         for (let x = 0; x < view[y].length; x++) {
//             const tileId = view[y][x];
//             // Dessiner la tuile si ce n'est pas un espace vide
//             if (tileId !== -1) {
//                 drawTile(tileId, x, y);
//             }
//         }
//     }
// }

// // Fonction pour dessiner une tuile sur le canvas
// function drawTile(tileId, x, y) {
//     // Calculer les coordonnées de la tuile dans le tileset
//     const tileWidth = 16;
//     const tileHeight = 16;
//     const tilesPerRow = tileset.width / tileWidth;
//     const sx = (tileId % tilesPerRow) * tileWidth;
//     const sy = Math.floor(tileId / tilesPerRow) * tileHeight;
//     // Dessiner la tuile sur le canvas
//     ctx.drawImage(tileset, sx, sy, tileWidth, tileHeight, x * tileWidth, y * tileHeight, tileWidth, tileHeight);
// }

// // Parcourir chaque couche et les dessiner sur le canvas
// json.forEach(layer => {
//     drawLayer(layer.view);
// });

// Récupérer le canvas et son contexte

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Charger l'image du tileset
const tileset = new Image();
tileset.src = 'https://24hweb.iutv.univ-paris13.fr/tileset.png';

// Charger les données JSON depuis un fichier externe
fetch('laMap.json')
  .then(response => response.json())
  .then(data => {
    // Parcourir chaque couche et les dessiner sur le canvas
    data.forEach(layer => {
      drawLayer(layer.view);
    });
  });

// Fonction pour dessiner une couche
function drawLayer(view) {
  // Parcourir les données de vue et dessiner chaque tuile
  for (let y = 0; y < view.length; y++) {
    for (let x = 0; x < view[y].length; x++) {
      const tileId = view[y][x];
      // Dessiner la tuile si ce n'est pas un espace vide
      if (tileId !== -1) {
        drawTile(tileId, x, y);
      }
    }
  }
}

// Fonction pour dessiner une tuile sur le canvas
function drawTile(tileId, x, y) {
  // Calculer les coordonnées de la tuile dans le tileset
  const tileWidth = 16;
  const tileHeight = 16;
  const tilesPerRow = tileset.width / tileWidth;
  const sx = (tileId % tilesPerRow) * tileWidth;
  const sy = Math.floor(tileId / tilesPerRow) * tileHeight;
  // Dessiner la tuile sur le canvas
  ctx.drawImage(tileset, sx, sy, tileWidth, tileHeight, x * tileWidth, y * tileHeight, tileWidth, tileHeight);
}
